#!/usr/bin/env python
# pylint: disable-msg=W0613,C0103
"""
Kill transfers by changing the state of documents in couchDB to 'killed'.
For a given task, it can kill all its transfers or the transfers of specified documents.
"""

import os
import sys
import getopt

from WMCore.Database.CMSCouch import CouchServer
from WMCore.Configuration import loadConfigurationFile
import datetime
import time
import traceback

def main():

    if "WMAGENT_CONFIG" not in os.environ:
        print "The WMAGENT_CONFIG environment variable needs to be set."
        sys.exit(0)

    def usage():
        msg = """
              Usage:
              kill-transfer -t <taskname> [-i docID comma separated list]
              Examples:
              - To kill all transfers in a task:
                kill-transfer -t <taskname>
              - To kill the transfers for specific documents in a task:
                kill-transfer -t <taskname> -i <docID1,docID2,...>
              """
        print(msg)

    argv = sys.argv[1:]
    if len(argv) == 0:
        msg = "No arguments provided."
        msg += " You need to provide (at least) the name of the task whose transfers you want to kill."
        print msg
        usage()
        sys.exit(1)

    valid_opts = ["-h", "-t:", "-i:"]
    valid_long_opts = ["--help"]
    try:
        opts, dummyargs = getopt.getopt(argv, "".join([vo.strip("-") for vo in valid_opts]), [vo.strip("-") for vo in valid_long_opts])
    except getopt.GetoptError as ex:
        print str(ex)
        usage()
        sys.exit(2)

    taskname = ''
    docIDs = ''
    valid_opts_no_colon = [vo.strip(":") for vo in valid_opts]
    valid_long_opts_no_equal = [vo.strip("=") for vo in valid_long_opts]
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        if opt == "-t" and str(arg) not in valid_opts_no_colon + valid_long_opts_no_equal:
            taskname = str(arg)
        if opt == "-i" and str(arg) not in valid_opts_no_colon + valid_long_opts_no_equal:
            docIDs = [idVal for idVal in str(arg).split(",") if idVal != '']
    if taskname == '':
        msg = "No task name provided."
        print msg
        usage()
        sys.exit(3)
    if len(docIDs):
        print "Will kill transfers for task %s, documents %s." % (taskname, str(docIDs))
    else:
        print "Will kill all transfers for task %s." % taskname

    config = loadConfigurationFile(os.environ["WMAGENT_CONFIG"])
    server = CouchServer(config.AsyncTransfer.couch_instance, config.AsyncTransfer.opsProxy, config.AsyncTransfer.opsProxy)
    try:
        database = server.connectDatabase(config.AsyncTransfer.files_database)
    except Exception as ex:
        msg = "Error while connecting to %s couchDB." % config.AsyncTransfer.files_database
        print msg
        sys.exit(4)
    try:
        docs_forKill = database.loadView('AsyncTransfer', 'forKill', {'reduce': False, 'key': taskname})['rows']
    except Exception as ex:
        msg = "Error while connecting to %s couchDB" % config.AsyncTransfer.files_database
        print msg
        sys.exit(4)
    if not len(docs_forKill):
        msg = "Found no documents to kill."
        print msg
        sys.exit(0)
    for doc in docs_forKill:
        if doc['key'] != taskname:
            continue
        docid = doc['value']
        if len(docIDs) and (docid not in docIDs):
            continue
        now = str(datetime.datetime.now())
        data = {}
        data['end_time'] = now
        data['state'] = 'killed'
        data['last_update'] = time.time()
        data['retry'] = now
        valid = True
        while valid:
            try:
                database.updateDocument(docid, 'AsyncTransfer', 'updateJobs', data)
                valid = False
            except Exception as ex:
                msg = "Error updating document %s in %s couchDB. Retrying..." % (docid, config.AsyncTransfer.files_database)
                msg += str(ex)
                msg += str(traceback.format_exc())
                print msg
                continue
    sys.exit(0)

if __name__ == "__main__":
    main()
