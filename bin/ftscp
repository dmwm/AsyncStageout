#!/bin/sh


##H This is a "srmcp"-like script using FTS to transfer files.
##H
##H Usage: ftscp -copyjobfile=FILE [-report=FILE] -passfile=FILE
##H              [-server=SERVER-ACCESS-POINT]
##H              [-mode=MODE] [-mapfile=SRM2FTS_SERVER_MAP]
##H              [-m=MYPROXY_SERVER] [-token=TOKEN]
##H
##H Takes a list of source/destination file pairs and copies them
##H using FTS.  The files must be given through a "copyjob" file,
##H with one "SOURCE DESTINATION" line per file copy, the names
##H separated with a single space character, and no leading or
##H trailing white space.
##H
##H If the "-report" option is used, the status of each file copy
##H is written in there.  The exit code from the command is zero
##H if all the files have been copied successfuly, otherwise non-
##H zero; the details can be found in the report file.
##H
##H The "-passfile" specifies the file name from which to read the
##H the password for FTS MyProxy password.  This option is required
### for FTS 1.5 server,
##H and the file must be readable and writeable only by the user or
##H the command will fail.
##H
##H The "-server" option specifies the FTS entry point.  If this
##H option is not used, gLite service discovery is used.
##H
##H The "-mode" option specifies whether to run against a single FTS
##H endpoint or to use multiple endpoints.
##H
##H The "-mapfile" option specifies a map of SRM endpoint to FTS server,
##H used in place of service discovery.
##H
##H The "-m" option specifies a myproxy server to use for the transfer.
##H This is usually required if you are using an "out of region" FTS server.
##H
##H If "-token=TOKEN" is specified, the space token (TOKEN) will
##H be passed to the FTS submission. Default is *no token passed*
##H


##H Error codes:
##H 1 - unrecognised option
##H 101 - missing -copyjob option
##H 102 - file specified with -copyjob does not exist
##H 103 - file specified with -copyjob is unreadable
##H 111 - missing -passfile option
##H 112 - file specified with -passfile does not exist
##H 113 - file specified with -passfile is unreadable
##H 114 - file specified with -passfile is insecure, restrict with 'chmod 600 $passfile'
##H 122 - file specified with -mapfile does not exist
##H 123 - file specified with -mapfile is unreadable
##H 201 - running in single server mode, without specifying a server
##H 301 - too many errors from status update

usage() { grep '^##H' < $0 | sed 's/^\(##H \|##H$\)//'; exit 1; }

# Pick up options
report=/dev/null copyjob= passfile= server= myproxy_server=
token=""

for arg; do
  case $arg in
    -copyjobfile=* )
      copyjobfile="${arg#-copyjobfile=}"
      echo "copyjobfile=$copyjobfile (contents follow)"
      cat $copyjobfile 2>/dev/null
     ;;
    -report=* )
      report="${arg#-report=}"
      echo "report=$report"
      ;;
    -passfile=*)
      passfile="${arg#-passfile=}"
      echo "passfile=$passfile"
      ;;
    -server=* )
      server="${arg#-server=}"
      echo "server=$server"
      ;;
    -mode=* )
      mode="${arg#-mode=}"
      echo "mode=$mode"
      ;;
    -mapfile=* )
      mapfile="${arg#-mapfile=}"
      echo "mapfile=$mapfile"
      ;;
    -m=* )
      myproxy_server="-m ${arg#-m=}"
      echo "MyProxy server option=$myproxy_server"
      ;;
    -token=* )
      token="${arg#-token=}"
      if [ "$token" != "" ] ; then
	  echo "token=$token --> passing SRM space token ($token) to FTS submissions"
      fi
      ;;
    -h )
      usage;;
    -* )
      echo "unrecognised option $arg" 1>&2; exit 1 ;;
    * )
      break ;;
  esac
done

# Verify arguments
[ -z "$copyjobfile" ] && { echo "Missing -copyjobfile, use -h for help." 1>&2; exit 101; }
[ ! -f "$copyjobfile" ] && { echo "$copyjobfile: no such file" 1>&2; exit 102; }
[ ! -r "$copyjobfile" ] && { echo "$copyjobfile: cannot read" 1>&2; exit 103; }

if [ -z "$passfile" ]; then
    echo "Warning: missing -passfile, use -h for help unless intentional." 1>&2;
else
    [ ! -f "$passfile" ] && { echo "$passfile: no such file" 1>&2; exit 112; }
    [ ! -r "$passfile" ] && { echo "$passfile: cannot read" 1>&2; exit 113; }
    case $(ls -l "$passfile" 2>/dev/null | awk '{print $1}') in ????------ ) ;;
	* ) echo "$passfile: password file has vulnerable file access permissions" 1>&2;
	echo "$passfile: please restrict with 'chmod 600 $passfile'" 1>&2; exit 114;;
    esac
fi

if [ -z "$mapfile" ]; then :; else
  [ ! -f "$mapfile" ] && { echo "$mapfile: no such file" 1>&2; exit 122; }
  [ ! -r "$mapfile" ] && { echo "$mapfile: cannot read" 1>&2; exit 123; }
fi

if [ "$mode" == "multi" ]; then
  echo "finding appropriate fts server from $mapfile or BDII"
  fts_contact=""
  if [ -z "$mapfile" ]; then
    echo "no FTS server or FTS mapping file is given." 1>&2; exit 10;
  elif [  ! -r "$mapfile" ]; then
    echo "$mapfile: cannot read" 1>&2; exit 123;
  else
    srm_contact=`head -1 $copyjobfile|awk '{print $1}'|awk -F? '{print $1}'`;
    fts_contact=`grep $srm_contact $mapfile|awk '{print $2}'|cut -f2 -d=|awk '{print $NF}'`;
    if [ -z "$fts_contact" ]; then :
      # [FIXME] Try service discovery here
      #if [ -z "$discovered_fts" ]: then
      fts_contact=`grep DEFAULT $mapfile|awk '{print $2}'|cut -f2 -d=|awk '{print $NF}'`
      echo "Using DEFAULT FTS server:$fts_contact";
      #else
      #fts_contact=$discovered_fts
    fi
    if [ -n $fts_contact ]; then
      server=`echo $fts_contact|sed 's|"||g'`;
      server="-s $server";
    else
      echo "No FTS server is found, exit." 1>&2; exit 1;
    fi
  fi
elif [ -z "$server" ]; then
  echo "Running in single server mode, without specifying a server. Cannot identify FTS server in this configuration"
  exit 201;
else
  server="-s $server";
fi

echo "FTS server is: $server"

# Install signal handler which will cancel the job.  This doesn't
# exit, but hopefully closes the loop below to terminate.  If we
# don't manage even that in time, we'll just get killed by a more
# aggressive signal, and we've requested transfer cancellation, so
# we should be fine.
ftsjob= sleep=10 index=0 increment=1 docancel=true errors=0
red_alert() {
  echo "* received signal $(expr $1 - 128), cancelling job"
  if [ X"$ftsjob" != X ]; then
    if $docancel; then
      echo "+ glite-transfer-cancel $server $ftsjob"
      glite-transfer-cancel $server $ftsjob
      sleep=2 increment=0 docancel=false
    fi
  else
    exit $1
  fi
}

trap 'red_alert $?' 1 2 15

# Create a FTS transfer request.
passopt=
passoptshow=
if [ ! -z "$passfile" ]; then
passopt="-p $(cat "$passfile")"
passoptshow="-p _censored_"
fi

if [ "$token" != "" ] ; then
    echo "+ glite-transfer-submit -o -t $token $passoptshow $myproxy_server $server -f $copyjobfile"
    ftsjob=$(glite-transfer-submit -o -t $token $passopt $myproxy_server $server -f $copyjobfile | grep -v Enter)
else
    echo "+ glite-transfer-submit -o $passoptshow $myproxy_server $server -f $copyjobfile"
    ftsjob=$(glite-transfer-submit -o $passopt $myproxy_server $server -f $copyjobfile | grep -v Enter)
fi

echo "ftsjob=$ftsjob"

# Poll transfer status, record output into the report
while true; do
  # Increment loop count, and every once in a while extend the sleep time
  index=$(expr $index + $increment)
  [ $(expr $index % 5) = 0 ] && sleep=$(expr $sleep + $sleep / 3)
  sleep $sleep

  # Get the status of the entire job
  echo "+ glite-transfer-status $server $ftsjob"
  ftsstatus=$(glite-transfer-status $server $ftsjob)
  echo "$ftsjob status is $ftsstatus"
  case $ftsstatus in
    Submitted )
      # [FIXME] need to just ignore this transient state
      ;;

    Pending )
      # [FIXME] Need something smarter here, adaptive sleep based on
      # how much has been done and remains to be done.
      ;;

    Ready )
      # [FIXME] ready should indicate the clock should start timing the transfer maybe
      ;;

    Active | Finishing )
      ;;

    Canceling )
	    # [FIXME] This state can go on for a  v e r y  l  o  n  g   t   i   m   e
      ;;

    Hold )
      # [FIXME] what to do in this case?
      # echo "+ glite-transfer-cancel $server $ftsjob"
      # glite-transfer-cancel $server $ftsjob
      # exit 8
      ;;

    Done | Finished | FinishedDirty | Failed | Canceled )
      # Job done, record report file, quit
      echo "+ glite-transfer-status -l $server $ftsjob"
      glite-transfer-status -l $server $ftsjob # for log

      glite-transfer-status -l $server $ftsjob |
        while read item arg; do
			    case $item in
			      Source: )
			        src="$arg" ;;
			      Destination:)
			        dest="$arg" ;;
			      State: )
			        case $arg in
			          Done | Finished ) status="0" state="$arg" ;;
			   				*    ) status="1" state="$arg" ;;
			        esac;;
			      Reason: )
			        echo "$src $dest $status $state $arg" ;;
			    esac
			  done > "$report"

      if glite-transfer-status -l $server $ftsjob | \
			   grep State: | egrep -v 'Done|Finished' >/dev/null; then
			  exit 1
      else
        exit 0
      fi
      ;;

    * )
      echo "warning: unexpected job status '$ftsstatus'" 1>&2
      errors=$(expr $errors + 1)
      if [ $errors -gt 10 ]; then
      	echo "Too many errors from status update, I give up!"
        # Fail in the ASO canceled files.
        count=true
        server_endpoint=`echo $server|cut -d" " -f2`
        for transfer in `cat $copyjobfile`
        do
          if $count
          then
            echo "Source:      $transfer"
            count=false
          else
            echo "Destination: $transfer"
            echo "State:       Failed"
            echo "Retries:     0"
            echo "Reason:      Unknown Transfer Error: Please ask support to check the logs! Hints: middleware problem, FTS server $server_endpoint is unreachable."
            echo "Duration:    0"
            echo ""
            count=true
          fi
        done
        exit 301
      elif [ $errors -gt 5 ]; then
	    	echo "Too many errors from status update, cancelling transfer"
        glite-transfer-cancel $server $ftsjob
      fi
      ;;
  esac
done
